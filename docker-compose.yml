version: '3.8'

services:
  # TimescaleDB (PostgreSQL with time-series extension)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: synthetic-timescaledb
    environment:
      POSTGRES_DB: synthetic_market
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: synthetic-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: synthetic-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Data Generator Service
  generator:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: synthetic-generator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:29092
      GENERATOR_INTERVAL_MS: 100
      TICKERS: SYNTH,TECH,FINANCE,ENERGY,HEALTH
    command: python -m python_src.services.data_generator
    restart: unless-stopped

  # Data Processor Service
  processor:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: synthetic-processor
    depends_on:
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: synthetic_market
      DB_USER: postgres
      DB_PASSWORD: postgres
      KAFKA_BROKERS: kafka:29092
    command: python -m python_src.services.data_processor
    restart: unless-stopped

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: synthetic-api
    depends_on:
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: synthetic_market
      DB_USER: postgres
      DB_PASSWORD: postgres
      KAFKA_BROKERS: kafka:29092
    command: uvicorn python_src.main:app --host 0.0.0.0 --port 3000
    restart: unless-stopped

volumes:
  timescale_data:
